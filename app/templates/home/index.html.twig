{% extends 'base.html.twig' %}
{% block title %}Live Foot — Home{% endblock %}

{% block body %}
<h2 style="margin:0 0 12px 0">Browse matches</h2>

<div class="card" style="display:grid;grid-template-columns:repeat(5, minmax(120px,1fr));gap:10px;align-items:end">
  <div>
    <label for="country">Country</label><br>
    <select id="country" disabled>
      <option value="">All</option>
    </select>
  </div>

  <div>
    <label for="league">League</label><br>
    <select id="league" disabled>
      <option value="">All</option>
    </select>
  </div>

  <div>
    <label for="season">Season</label><br>
    <select id="season" disabled>
      <option value="">All</option>
    </select>
  </div>

  <div>
    <label for="date">Date (UTC)</label><br>
    <input id="date" type="date" value="{{ today|default('') }}">
  </div>

  <div>
    <label for="status">Status</label><br>
    <select id="status">
      <option value="">All</option>
      <option value="scheduled">Scheduled</option>
      <option value="live">Live</option>
      <option value="finished">Finished</option>
    </select>
  </div>
</div>

<div style="margin-top:10px; display:flex; gap:8px; align-items:center">
  <button id="btnToday" class="btn">Today</button>
  <button id="btnReset" class="btn" style="opacity:.85">Reset</button>

  <a id="btnLeague" class="btn" href="#" style="margin-left:auto; opacity:.7; pointer-events:none">Open league page</a>
</div>

<div id="emptyNotice" class="card" style="display:none; margin-top:12px">
  <p style="margin:0">No countries or leagues are enabled for the Home screen yet.
    Go to <a href="/admin/country">Admin → Countries</a> and <a href="/admin/league">Admin → Leagues</a>
    to toggle <em>Show on Home</em>.
  </p>
</div>

<div id="matches" class="card" style="margin-top:12px">
  <h3 style="margin:0 0 8px 0">Matches</h3>
  <p id="loading">Loading…</p>
  <div id="matchList"></div>
  <button id="btnMore" class="btn" style="margin-top:10px;display:none">Load 10 more</button>
</div>

<style>
.btn{ padding:6px 12px; border-radius:10px; border:1px solid #374151; background:#1f2937; color:#e6edf3; text-decoration:none; display:inline-block }
.btn[disabled], .btn.disabled{ opacity:.5; pointer-events:none }
.row{
  display:grid; grid-template-columns:minmax(110px,140px) 1fr 70px 1fr;
  gap:10px; align-items:center; padding:10px; border-radius:10px; transition:background .15s ease;
}
.row:hover{ background:#0f172a }
.team{ display:flex; gap:8px; align-items:center; min-width:0 }
.team img{ width:20px; height:20px; object-fit:contain; border-radius:3px; background:#0b0f14 }
.ellipsis{ overflow:hidden; text-overflow:ellipsis; white-space:nowrap }
.score{ text-align:center; color:inherit; text-decoration:none }
.team-link{ color:inherit; text-decoration:none }
.team-link:hover, .score:hover{ text-decoration:underline }
</style>

<script>
(function(){
  const PAGE_SIZE = 10;

  const preset = {
    country: {{ preset.country ? ('"~preset.country~"') : 'null' }},
    league:  {{ preset.league  ? ('"~preset.league~"')  : 'null' }},
    season:  {{ preset.season  ? ('"~preset.season~"')  : 'null' }},
    status:  {{ preset.status  ? ('"~preset.status~"')  : 'null' }},
  };

  const els = {
    country: document.getElementById('country'),
    league:  document.getElementById('league'),
    season:  document.getElementById('season'),
    date:    document.getElementById('date'),
    status:  document.getElementById('status'),
    matches: document.getElementById('matches'),
    list:    document.getElementById('matchList'),
    loading: document.getElementById('loading'),
    emptyNotice: document.getElementById('emptyNotice'),
    btnToday: document.getElementById('btnToday'),
    btnReset: document.getElementById('btnReset'),
    btnLeague: document.getElementById('btnLeague'),
    btnMore: document.getElementById('btnMore'),
  };

  let paging = { offset: 0, exhausted: false };

  function resetPaging(){
    paging.offset = 0;
    paging.exhausted = false;
    els.btnMore.style.display = 'none';
  }

  function yearsList(nBack=5){
    const y = new Date().getUTCFullYear();
    const arr = [];
    for (let k = nBack; k >= 0; k--) arr.push(y - k);
    return arr;
  }

  function fmtTime(iso){ return new Date(iso).toISOString().slice(11,16); }

  function updateLeagueButton(){
    const opt = els.league.selectedOptions[0];
    if (!opt || !opt.dataset.slug) {
      els.btnLeague.classList.add('disabled');
      els.btnLeague.style.opacity = '.7';
      els.btnLeague.style.pointerEvents = 'none';
      els.btnLeague.href = '#';
      return;
    }
    els.btnLeague.href = `/league/${opt.dataset.slug}`;
    els.btnLeague.classList.remove('disabled');
    els.btnLeague.style.opacity = '1';
    els.btnLeague.style.pointerEvents = '';
  }

  function renderMatches(rows, {append = false} = {}){
    if (!append) els.list.innerHTML = '';
    if (!rows.length && !append && els.list.children.length === 0) {
      els.list.innerHTML = '<p>No matches for the selected filters.</p>';
      els.btnMore.style.display = 'none';
      return;
    }
    const html = [];
    for (const r of rows) {
      html.push(`
        <div class="row">
          <span class="when">${fmtTime(r.dateUtc)}</span>

          <a class="team ellipsis team-link" href="/team/${r.home.slug}">
            <img src="${r.home.logo||''}" alt="">
            <span class="ellipsis">${r.home.name}</span>
          </a>

          <a class="score" href="/match/${r.id}" aria-label="Open match">
            ${r.home.goals ?? ''} - ${r.away.goals ?? ''}
          </a>

          <a class="team ellipsis team-link" href="/team/${r.away.slug}" style="justify-self:end">
            <span class="ellipsis" style="text-align:right">${r.away.name}</span>
            <img src="${r.away.logo||''}" alt="">
          </a>
        </div>
      `);
    }
    if (append) els.list.insertAdjacentHTML('beforeend', html.join(''));
    else els.list.innerHTML = html.join('');
  }

  async function fetchMatchesPage(offset){
    els.loading && (els.loading.textContent = 'Loading…');

    const league = els.league?.value || '';
    const season = els.season?.value || '';
    const date   = els.date?.value || '';
    const status = els.status?.value || '';

    const qs = new URLSearchParams({ limit: String(PAGE_SIZE), offset: String(offset) });
    if (league) qs.set('league', league);
    if (season) qs.set('season', season);
    if (date)   qs.set('date', date);
    if (status) qs.set('status', status);

    const res = await fetch('/api/matches?'+qs.toString(), {headers:{'Accept':'application/json'}, cache:'no-store'});
    const rows = res.ok ? await res.json() : [];
    els.loading && (els.loading.textContent = '');
    return Array.isArray(rows) ? rows : [];
  }

  async function loadMatches({append = false} = {}){
    if (!append) resetPaging();
    const rows = await fetchMatchesPage(paging.offset);
    renderMatches(rows, {append});
    if (rows.length < PAGE_SIZE) {
      paging.exhausted = true;
      els.btnMore.style.display = 'none';
    } else {
      paging.offset += PAGE_SIZE;
      els.btnMore.style.display = '';
    }
  }

  // === Countries/Leagues (optional but enables the filters)
  async function loadCountries(){
    try {
      const res = await fetch('/api/countries', {headers:{'Accept':'application/json'}, cache:'no-store'});
      if (!res.ok) throw 0;
      const rows = await res.json();
      if (!Array.isArray(rows) || rows.length === 0) throw 0;

      els.emptyNotice.style.display = 'none';
      els.country.innerHTML = '<option value="">All</option>' +
        rows.map(c => `<option value="${c.code}">${c.name}</option>`).join('');
      els.country.disabled = false;

      if (preset.country) {
        const opt = Array.from(els.country.options).find(o => o.value === preset.country);
        if (opt) els.country.value = preset.country;
      }
      await loadLeagues();
      return;
    } catch {
      // fallback: enable filters but keep "All"
      els.country.disabled = false;
      els.league.disabled = false;
      els.season.disabled = false;
      await loadMatches({append:false});
    }
  }

  async function loadLeagues(){
    const cc = els.country.value;
    if (!cc) {
      // reset leagues and seasons to "All"
      els.league.innerHTML = '<option value="">All</option>';
      els.season.innerHTML = '<option value="">All</option>';
      els.league.disabled = false;
      els.season.disabled = false;
      updateLeagueButton();
      await loadMatches({append:false});
      return;
    }

    try {
      const res = await fetch('/api/leagues?country='+encodeURIComponent(cc), {headers:{'Accept':'application/json'}, cache:'no-store'});
      if (!res.ok) throw 0;
      const rows = await res.json();

      els.league.innerHTML = '<option value="">All</option>' +
        (Array.isArray(rows) ? rows.map(l =>
          `<option value="${l.id}" data-slug="${l.slug}" data-countryslug="${l.countrySlug}" data-season="${l.season}">${l.name}</option>`
        ).join('') : '');
      els.league.disabled = false;

      const curSeason = (rows && rows[0]?.season) ?? (new Date().getUTCFullYear());
      const seasons = yearsList(5);
      els.season.innerHTML = '<option value="">All</option>' +
        seasons.map(y => `<option value="${y}">${y}</option>`).join('');
      els.season.disabled = false;
      els.season.value = preset.season ?? curSeason;

      if (preset.league) {
        const opt = Array.from(els.league.options).find(o => o.value === preset.league);
        if (opt) els.league.value = preset.league;
        preset.league = null;
      }

      updateLeagueButton();
      await loadMatches({append:false});
    } catch {
      // if leagues fail, just keep them as "All" and load matches
      els.league.disabled = false;
      els.season.disabled = false;
      updateLeagueButton();
      await loadMatches({append:false});
    }
  }

  // === Events
  els.country.addEventListener('change', loadLeagues);
  ['league','season','date','status'].forEach(id => {
    document.getElementById(id).addEventListener('change', async (e) => {
      if (e.target === els.league) updateLeagueButton();
      await loadMatches({append:false});
    });
  });
  els.btnMore.addEventListener('click', async () => {
    if (!paging.exhausted) await loadMatches({append:true});
  });
  els.btnToday.addEventListener('click', async () => {
    const d = new Date();
    const utc = new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()));
    els.date.value = utc.toISOString().slice(0,10);
    await loadMatches({append:false});
  });
  els.btnReset.addEventListener('click', async () => {
    preset.country = preset.league = preset.season = preset.status = null;
    els.country.value = '';
    els.league.value = '';
    els.season.value = '';
    els.status.value = '';
    els.date.value = '{{ today|default("") }}';
    updateLeagueButton();
    await loadMatches({append:false});
  });

  // === Initial run
  (async () => {
    // honor preset status if provided
    if (preset.status) {
      const opt = Array.from(els.status.options).find(o => o.value === preset.status);
      if (opt) els.status.value = preset.status;
    }
    await loadCountries(); // will call loadLeagues() or fallback to loadMatches()
  })();
})();
</script>
{% endblock %}
