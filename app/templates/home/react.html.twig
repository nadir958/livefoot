{% extends 'base.html.twig' %}
{% block title %}Live Foot — Today{% endblock %}

{% block body %}
  <div id="app"></div>

  <script type="module">
  import React from "https://esm.sh/react@18";
  import { createRoot } from "https://esm.sh/react-dom@18/client";

  const e = React.createElement;
  const cls = (...xs) => xs.filter(Boolean).join(' ');
  const utcYmd = (d=new Date()) => {
    const y=d.getUTCFullYear(), m=String(d.getUTCMonth()+1).padStart(2,'0'), day=String(d.getUTCDate()).padStart(2,'0');
    return `${y}-${m}-${day}`;
  };

  function StatusPill({ status, minute }) {
    const s = (typeof status === 'string' ? status : (status && status.value) || 'scheduled').toLowerCase();
    const label = s === 'live' && minute ? `${minute}'` : s;
    const base = "inline-flex items-center justify-center h-5 px-2 rounded-full border text-xs capitalize";
    const tone = s === "live" ? "border-red-300 text-red-300"
               : s === "finished" ? "border-blue-300 text-blue-300"
               : "border-emerald-300 text-emerald-300";
    return e('span', { className: cls(base, tone) }, label);
  }

  function MatchRow({ m }) {
    const status = typeof m.status === 'string' ? m.status : (m.status && m.status.value) || 'scheduled';
    const dt = new Date(m.dateUtc);
    const timeStr = dt.toISOString().slice(11,16);
    const dateStr = dt.toISOString().slice(0,10);
    const homeVal = m.home?.goals ?? m.homeScore;
    const awayVal = m.away?.goals ?? m.awayScore;
    const hasScore = (homeVal != null) || (awayVal != null);

    return e('div', { className: 'grid grid-cols-[minmax(120px,160px)_1fr_72px_1fr] gap-2 items-center p-2 rounded-lg', style:{transition:'background .15s ease'} }, [
      e('div', { key:'when', className:'flex items-center gap-2 min-w-0' }, [
        e('span', { className:'tabular-nums opacity-90', title:dt.toISOString() }, `${timeStr} `),
        e('span', { className:'opacity-70 text-xs hidden sm:inline' }, dateStr),
        e(StatusPill, { status, minute: m.minute })
      ]),
      e('a', { key:'home', className:'flex items-center gap-2 min-w-0 text-inherit no-underline hover:underline', href:`/team/${m.home.slug}` }, [
        e('img', { src:m.home.logo||'', alt:'', loading:'lazy', decoding:'async', className:'w-[20px] h-[20px] object-contain rounded bg-[#0b0f14]' }),
        e('span', { className:'truncate' }, m.home.name)
      ]),
      e('a', { key:'score', className:'text-center no-underline text-inherit hover:underline', href:`/match/${m.id}` }, [
        hasScore
          ? e('span', { className:'tabular-nums font-semibold' }, `${(homeVal ?? ' ')} - ${(awayVal ?? ' ')}`)
          : e('span', { className:'opacity-70' }, 'vs')
      ]),
      e('a', { key:'away', className:'flex items-center gap-2 justify-self-end min-w-0 text-inherit no-underline hover:underline', href:`/team/${m.away.slug}` }, [
        e('span', { className:'truncate text-right' }, m.away.name),
        e('img', { src:m.away.logo||'', alt:'', loading:'lazy', decoding:'async', className:'w-[20px] h-[20px] object-contain rounded bg-[#0b0f14]' })
      ]),
      e('style', { key:'css' }, `
        .grid.grid-cols-[minmax(120px,160px)_1fr_72px_1fr]:hover{ background:#0f172a }
        @media (max-width: 600px){
          .grid.grid-cols-[minmax(120px,160px)_1fr_72px_1fr]{ grid-template-columns:1fr 1fr }
          .grid.grid-cols-[minmax(120px,160px)_1fr_72px_1fr] > :nth-child(1){ grid-column:1/2 }
          .grid.grid-cols-[minmax(120px,160px)_1fr_72px_1fr] > :nth-child(3){ grid-column:2/3; justify-self:end }
          .grid.grid-cols-[minmax(120px,160px)_1fr_72px_1fr] > :nth-child(2){ grid-column:1/3 }
          .grid.grid-cols-[minmax(120px,160px)_1fr_72px_1fr] > :nth-child(4){ grid-column:1/3; justify-self:stretch }
        }
      `)
    ]);
  }

  function LeagueCard({ league }) {
    const [matches, setMatches] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    const [error, setError] = React.useState(null);
    const today = React.useMemo(() => utcYmd(new Date()), []);

    React.useEffect(() => {
      let alive = true;
      (async () => {
        setLoading(true); setError(null);
        try{
          // ⚠️ NOW calling your proxy that fetches API-Football server-side
          const qs = new URLSearchParams({ leagueExt:String(league.externalId), date:today });
          const res = await fetch(`/api/public/matches?${qs.toString()}`, { headers:{Accept:'application/json'}, cache:'no-store' });
          const data = await res.json();
          if (!alive) return;
          setMatches(Array.isArray(data) ? data : []);
        }catch(err){ if (alive) setError(String(err)); }
        finally{ if (alive) setLoading(false); }
      })();
      return () => { alive = false; };
    }, [league.externalId, today]);

    return e('div', { className:'card', style:{background:'#111827',border:'1px solid #1f2937',borderRadius:'12px',padding:'12px'} }, [
      e('div', { key:'hdr', className:'flex items-center gap-3 mb-2' }, [
        league.logo ? e('img', { src:league.logo, alt:'', className:'w-6 h-6 rounded bg-[#0b0f14] object-contain' }) : null,
        e('a', { href:`/league/${league.slug}`, className:'font-semibold text-inherit no-underline hover:underline' }, league.name),
        e('span', { className:'ml-auto opacity-70 text-sm' }, new Date().toISOString().slice(0,10))
      ]),
      loading ? e('p', { className:'opacity-80' }, 'Loading…') :
      error   ? e('p', { className:'text-red-300' }, error) :
      (matches.length === 0 ? e('p', { className:'opacity-80' }, 'No matches today.') :
        e('div', { className:'flex flex-col divide-y', style:{borderColor:'#1f2937'} },
          matches.map(m => e(MatchRow, { key:m.id, m })))
      )
    ]);
  }

  function HomeReact(){
    const [leagues, setLeagues] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    const [error, setError] = React.useState(null);

    React.useEffect(() => {
      let alive = true;
      (async () => {
        setLoading(true); setError(null);
        try{
          // ⚠️ Fetch featured leagues (with externalId) from your DB
          const res = await fetch('/api/public/home-leagues', { headers:{Accept:'application/json'}, cache:'no-store' });
          const data = await res.json();
          if (!alive) return;
          setLeagues(Array.isArray(data) ? data : []);
        }catch(err){ if (alive) setError(String(err)); }
        finally{ if (alive) setLoading(false); }
      })();
      return () => { alive = false; };
    }, []);

    return e('div', { className:'space-y-3' }, [
      e('div', { key:'hdr', className:'flex items-center gap-3 mb-2' }, [
        e('h2', { className:'m-0 text-xl font-semibold' }, 'Today'),
        e('a', {
          href:'/search',
          className:'ml-auto no-underline',
          style:{padding:'6px 10px',borderRadius:'10px',border:'1px solid #374151',background:'#1f2937',color:'#e6edf3'}
        }, 'Search')
      ]),
      loading ? e('p', { className:'opacity-80' }, 'Loading leagues…') :
      error   ? e('p', { className:'text-red-300' }, error) :
      e('div', { className:'grid gap-3', style:{gridTemplateColumns:'repeat(auto-fill, minmax(280px, 1fr))'} },
        leagues.map(l => e(LeagueCard, { key:l.id, league:l }))
      )
    ]);
  }

  createRoot(document.getElementById('app')).render(e(HomeReact));
</script>

{% endblock %}
